esphome:
  name: sonoff-rf-bridge-r2
  friendly_name: Sonoff RF Bridge R2

esp8266:
  board: esp01_1m
  framework:
    version: recommended
    
logger:
  baud_rate: 0

ota:
  - platform: esphome
    id: ota_esphome
    password: !secret ota_password

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
    manual_ip:
      static_ip: 192.168.1.105
      gateway: 192.168.1.1
      subnet: 255.255.255.0
  ap:
    ssid: "sonoff-rf-bridge-r2"
    password: !secret ap_password

captive_portal:

button:
  - platform: restart
    name: "Restart"

uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 19200

text_sensor:
  - platform: version
    hide_timestamp: true
    name: "ESPHome Version"
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      icon: mdi:wifi
    ssid:
      name: "Connected SSID"
      icon: mdi:wifi-strength-2

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 120s
  - platform: uptime
    name: Sonoff RF Bridge Uptime

binary_sensor:
  - platform: status
    name: Sonoff RF Bridge Status

light:
  - platform: status_led
    name: "Switch state"
    pin: GPIO13

api:
  actions:
    - action: send_rf_code
      variables:
        sync: int
        low: int
        high: int
        code: int
      then:
        - rf_bridge.send_code:
            sync: !lambda 'return sync;'
            low: !lambda 'return low;'
            high: !lambda 'return high;'
            code: !lambda 'return code;'
    - action: send_advanced_code
      variables:
        length: int
        protocol: int
        code: string
      then:
        - rf_bridge.send_advanced_code:
            length: !lambda 'return length;'
            protocol: !lambda 'return protocol;'
            code: !lambda 'return code;'
    - action: send_raw
      variables:
        raw: string
      then:
        - rf_bridge.send_raw:
            raw: !lambda 'return raw;'
    - action: learn
      then:
        - rf_bridge.learn
    - action: start_bucket_sniffing
      then:
        - rf_bridge.start_bucket_sniffing
    - action: start_advanced_sniffing
      then:
        - rf_bridge.start_advanced_sniffing
    - action: stop_advanced_sniffing
      then:
        - rf_bridge.stop_advanced_sniffing
    - action: beep
      then:
        - rf_bridge.beep:
            duration: 100

rf_bridge:
  on_code_received:
    then:
      - homeassistant.event:
          event: esphome.rf_code_received
          data:
            sync: !lambda 'return data.sync;'
            low: !lambda 'return data.low;'
            high: !lambda 'return data.high;'
            code: !lambda 'return data.code;'
  on_advanced_code_received:
    - homeassistant.event:
        event: esphome.rf_advanced_code_received
        data:
          length: !lambda 'return format_hex(data.length);'
          protocol: !lambda 'return format_hex(data.protocol);'
          code: !lambda 'return data.code;'